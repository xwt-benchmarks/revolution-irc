apply plugin: 'com.android.application'
apply plugin: 'io.mrarm.irc.build.settings-builder'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "io.mrarm.irc"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 10
        versionName "0.5.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        vectorDrawables.useSupportLibrary = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
	checkTypes {
            javaCompileOptions.annotationProcessorOptions.
                    classNames.add("org.checkerframework.checker.crypto.CryptoChecker")
            // Uncomment to do the strongboxbacked checking.
            // javaCompileOptions.annotationProcessorOptions.arguments.put("lint", "strongboxbacked")
            javaCompileOptions.annotationProcessorOptions.arguments.put("stubs", "hardwarebacked.astub")
        }

    }
	compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

}

repositories {
    mavenLocal()
}

configurations {
    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifiers inserted'
    }
    errorproneJavac {
        description = 'required to run the Checker Framework.'
    }
}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.vectordrawable:vectordrawable:1.0.1'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.android:flexbox:0.2.7'
    implementation 'com.github.mcmrarm:chatlib:master-SNAPSHOT'
    implementation 'com.github.mcmrarm:chatlib-android-core:master-SNAPSHOT'
    implementation 'com.github.mcmrarm:chatlib-android-storage:master-SNAPSHOT'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'net.lingala.zip4j:zip4j:1.3.2'
    implementation 'com.madgag.spongycastle:core:1.58.0.0'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
    implementation 'com.madgag.spongycastle:bcpkix-jdk15on:1.58.0.0'
    implementation 'com.github.mcmrarm:arscwriter:master-SNAPSHOT'
    implementation 'com.github.mcmrarm:thememonkey:master-SNAPSHOT'
    testImplementation 'junit:junit:4.12'

    ext.checkerFrameworkVersion = '3.1.1'
    annotationProcessor "org.checkerframework:crypto-checker:0.1-SNAPSHOT"
    implementation files("/path/to/crypto-checker/crypto-checker-qual-android/build/libs/crypto-checker-qual-android.jar")
    checkerFrameworkAnnotatedJDK files("/path/to/crypto-checker/jdk8.jar")
    compileOnly "org.checkerframework:checker-qual-android:${checkerFrameworkVersion}"
    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'

}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).all { compile ->
        if (compile.name.contains("CheckTypes")) {
            compile.options.compilerArgs += [
                    "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
            ]
            options.fork = true
            options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"]
        }
    }
}

